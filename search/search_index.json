{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":"<p>1. Light me up!  (1)</p> <ol> <li>Maybe you can blink the Barduino LED</li> </ol> <p>2. Say cheeeeese!  (1)</p> <ol> <li>Be creative</li> </ol> <p>3. Sticker Challenge (1)</p> <ol> <li>Let's see your graphic design skills</li> </ol> <p>4. Talk morse to me (1)</p> <ol> <li>-... .- .-. -.. ..- .. -. ---</li> </ol> <p>5. Jingle Bells! (1)</p> <ol> <li>Sing with me</li> </ol> <p>6. Barduino wishes you a Merry Christmas! (1)</p> <ol> <li>Don't forget the stamp</li> </ol> <p>7. Pianino (1)</p> <ol> <li>Play me!</li> </ol> <p>8. Will you get the lowest temperature? (1)</p> <ol> <li>Challenge accepted</li> </ol> <p>9. LED's get artistic (1)</p> <ol> <li>Try using one of those apps: Iphone Android</li> </ol> <p>10. Can you imagine the new Barduino? (1)</p> <ol> <li>How it should be?</li> </ol> <p>11. Christmas lights (1)</p> <ol> <li>Colorful lights</li> </ol> <p>12. Ligth a candle in the dark (1)</p> <ol> <li>Try using the light sensor...</li> </ol> <p>13. Visual effects (1)</p> <ol> <li>Maybe with p5js?</li> </ol> <p>14. Dress me up (1)</p> <ol> <li>Protect me</li> </ol> <p>15. Keyboard (1)</p> <ol> <li>UP RIGHT DOWN LEFT</li> </ol> <p>16. Let's play! (1)</p> <ol> <li>Can I be the controller?</li> </ol> <p>17. How AI imagines me? (1)</p> <ol> <li>A picture is worth a thousand words</li> </ol> <p>18. How is the weather? (1)</p> <ol> <li>Check this API</li> </ol> <p>19. Let's party! (1)</p> <ol> <li></li> </ol> <p>20. Change my name (1)</p> <ol> <li>How should I be called in the future?</li> </ol> <p>21. ChatGPT can you help me write a Cristmas card? (1)</p> <ol> <li>From the Barduino?</li> </ol> <p>22. Let's send it to someone (1)</p> <ol> <li>From Barduino with love </li> </ol> <p>23. Barduino meets traditions (1)</p> <ol> <li>Make me feel part of the family</li> </ol> <p>24. Caga tioino (1)</p> <ol> <li>Don't forget I'm from Barcelona!</li> </ol>"},{"location":"examples/","title":"Example codes","text":"<p>Here are some sample codes </p>"},{"location":"mqtt/","title":"Using MQTT to communicate the Barduino","text":"<p>Today we will be working on how to connect our Barduinos in a network to communicate between them. To do so we will use the MQTT protocol. </p>"},{"location":"mqtt/#what-is-mqtt","title":"What is MQTT?","text":"<p>MQTT is a lightweight, publish-subscribe, machine to machine network protocol for message queue/message queuing service. It is designed for connections with remote locations that have devices with resource constraints or limited network bandwidth, such as in the Internet of Things (IoT).</p> <p></p> <p>MQTT is based on topics and subtopics </p> <p></p> <p>Let's use it!</p>"},{"location":"mqtt/#light-up-an-led","title":"Light up an LED","text":"<p>Note</p> <p>Pair up, you will control your partner LED :)</p> <p>Warning</p> <p>You will need to install the PubSubClient Arduino library.</p> <p>Let's use this code </p> <pre><code>    #include &lt;WiFi.h&gt;\n    #include &lt;PubSubClient.h&gt;\n    #include &lt;WiFiClientSecure.h&gt;\n\n    //---- WiFi settings\n    const char* ssid = \"Iaac-Wifi\";\n    const char* password = \"EnterIaac22@\";\n    //---- MQTT Broker settings\n    const char* mqtt_server = \"704443975942461f8381dce09a42bf79.s2.eu.hivemq.cloud\";  // replace with your broker url\n    const char* mqtt_username = \"fablabbcn\";\n    const char* mqtt_password = \"fablabbcn\";\n    const int mqtt_port = 8883;\n\n    bool state = false;\n\n    WiFiClientSecure espClient;\n    PubSubClient client(espClient);\n    unsigned long lastMsg = 0;\n\n    #define MSG_BUFFER_SIZE (50)\n    char msg[MSG_BUFFER_SIZE];\n\n    const char* name_topic = \"josep\";\n    const char* send_topic = \"adai\";\n\n\n    static const char* root_ca PROGMEM = R\"EOF(\n    -----BEGIN CERTIFICATE-----\n    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\n    -----END CERTIFICATE-----\n    )EOF\";\n\n    void setup() {\n    Serial.begin(9600);\n    Serial.print(\"\\nConnecting to \");\n    Serial.println(ssid);\n\n    pinMode(0, INPUT);\n    pinMode(48, OUTPUT);\n\n    WiFi.mode(WIFI_STA);\n    WiFi.begin(ssid, password);\n\n    while (WiFi.status() != WL_CONNECTED) {\n        delay(500);\n        Serial.print(\".\");\n    }\n    Serial.println(\"\\nWiFi connected\\nIP address: \");\n    Serial.println(WiFi.localIP());\n\n    while (!Serial) delay(1);\n\n    espClient.setCACert(root_ca);\n    client.setServer(mqtt_server, mqtt_port);\n    client.setCallback(callback);\n    }\n\n    void loop() {\n\n    if (!client.connected()) reconnect();\n    client.loop();\n\n    if(!digitalRead(0)){\n        if (state){\n        publishMessage(name_topic, \"off\", true);\n        }\n        else{\n        publishMessage(name_topic, \"on\", true);\n        }\n        state = !state;\n        //publishMessage(name_topic, String(1), true);\n        delay(500);\n    }\n\n    //publishMessage(name_topic, String(1), true);\n    //publishMessage(sensor2_topic, String(2), true);\n    }\n\n    //=======================================================================Function=================================================================================\n\n    void reconnect() {\n    // Loop until we\u2019re reconnected\n    while (!client.connected()) {\n        Serial.print(\"Attempting MQTT connection\u2026\");\n        String clientId = \"ESP8266Client -\";  // Create a random client ID\n        clientId += String(random(0xffff), HEX);\n        // Attempt to connect\n        if (client.connect(clientId.c_str(), mqtt_username, mqtt_password)) {\n        Serial.println(\"connected\");\n\n        client.subscribe(send_topic);  // subscribe the topics here\n        //client.subscribe(command2_topic);   // subscribe the topics here\n        } else {\n        Serial.print(\"failed, rc=\");\n        Serial.print(client.state());\n        Serial.println(\" try again in 5 seconds\");  // Wait 5 seconds before retrying\n        delay(5000);\n        }\n    }\n    }\n\n    //=======================================\n    // This void is called every time we have a message from the broker\n\n    void callback(char* topic, byte* payload, unsigned int length) {\n    String incommingMessage = \"\"\n                                \"\";\n    for (int i = 0; i &lt; length; i++) incommingMessage += (char)payload[i];\n    Serial.println(\"Message arrived[\" + String(topic) + \"]\" + incommingMessage);\n    if(incommingMessage == \"on\"){\n        digitalWrite(48, HIGH);\n    }\n    else if(incommingMessage == \"off\"){\n        digitalWrite(48, LOW);\n    }\n\n    }\n\n    //======================================= publising as string\n    void publishMessage(const char* topic, String payload, boolean retained) {\n    if (client.publish(topic, payload.c_str(), true))\n        Serial.println(\"Message publised [\" + String(topic) + \"]: \" + payload);\n    }\n</code></pre> <p>Change the lines</p> <pre><code>    const char* name_topic = \"josep\";\n    const char* send_topic = \"adai\";\n</code></pre>"},{"location":"mqtt/#lets-make-some-colours","title":"Let's make some colours!","text":"<p>Now let's control the Neopixel!</p>"},{"location":"mqtt/#understanding-the-neopixel","title":"Understanding the Neopixel","text":"<p>Adafruit has a very nice documentation for theri Neopixel library. </p> <p>Today we will focus on HUE color:</p> <p></p> <p>Let's use this code to understand it better: </p> <pre><code>#include &lt;Adafruit_NeoPixel.h&gt;\n#define PIN 38\n#define NUMPIXELS 1\n\nAdafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);\n\nint hue = 0;\nString name = \"\";\n\nvoid setup() {\n  pixels.begin();  // INITIALIZE NeoPixel strip object (REQUIRED)\n  Serial.begin(115200);\n}\n\nvoid loop() {\n  if (Serial.available() &gt; 0) {\n    hue = Serial.parseInt();\n    name = Serial.readStringUntil('\\n');\n    Serial.println(hue);\n    Serial.println(name);\n    pixels.setPixelColor(0, pixels.ColorHSV(hue, 255, 255));\n    pixels.show();  // Send the updated pixel colors to the hardware.\n  }\n}\n</code></pre>"},{"location":"mqtt/#now-with-mqtt","title":"Now with MQTT","text":"<p>Now lets join codes and light up our classmates Neopixels!</p> <pre><code>#include &lt;WiFi.h&gt;\n#include &lt;PubSubClient.h&gt;\n#include &lt;WiFiClientSecure.h&gt;\n\n#include &lt;Adafruit_NeoPixel.h&gt;\n\n//---- WiFi settings\nconst char* ssid = \"Iaac-Wifi\";\nconst char* password = \"EnterIaac22@\";\n//---- MQTT Broker settings\nconst char* mqtt_server = \"704443975942461f8381dce09a42bf79.s2.eu.hivemq.cloud\";  // replace with your broker url\nconst char* mqtt_username = \"fablabbcn\";\nconst char* mqtt_password = \"fablabbcn\";\nconst int mqtt_port = 8883;\n\nbool state = false;\n\nWiFiClientSecure espClient;\nPubSubClient client(espClient);\nunsigned long lastMsg = 0;\n\n#define MSG_BUFFER_SIZE (50)\nchar msg[MSG_BUFFER_SIZE];\n\nconst char* class_topic = \"mdef/class\";\nconst char* name_topic = \"mdef/adai\";\n\n\nstatic const char* root_ca PROGMEM = R\"EOF(\n-----BEGIN CERTIFICATE-----\nMIIFazCCA1OgAwIBAgIRAIIQz7DSQONZRGPgu2OCiwAwDQYJKoZIhvcNAQELBQAw\nTzELMAkGA1UEBhMCVVMxKTAnBgNVBAoTIEludGVybmV0IFNlY3VyaXR5IFJlc2Vh\ncmNoIEdyb3VwMRUwEwYDVQQDEwxJU1JHIFJvb3QgWDEwHhcNMTUwNjA0MTEwNDM4\nWhcNMzUwNjA0MTEwNDM4WjBPMQswCQYDVQQGEwJVUzEpMCcGA1UEChMgSW50ZXJu\nZXQgU2VjdXJpdHkgUmVzZWFyY2ggR3JvdXAxFTATBgNVBAMTDElTUkcgUm9vdCBY\nMTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBAK3oJHP0FDfzm54rVygc\nh77ct984kIxuPOZXoHj3dcKi/vVqbvYATyjb3miGbESTtrFj/RQSa78f0uoxmyF+\n0TM8ukj13Xnfs7j/EvEhmkvBioZxaUpmZmyPfjxwv60pIgbz5MDmgK7iS4+3mX6U\nA5/TR5d8mUgjU+g4rk8Kb4Mu0UlXjIB0ttov0DiNewNwIRt18jA8+o+u3dpjq+sW\nT8KOEUt+zwvo/7V3LvSye0rgTBIlDHCNAymg4VMk7BPZ7hm/ELNKjD+Jo2FR3qyH\nB5T0Y3HsLuJvW5iB4YlcNHlsdu87kGJ55tukmi8mxdAQ4Q7e2RCOFvu396j3x+UC\nB5iPNgiV5+I3lg02dZ77DnKxHZu8A/lJBdiB3QW0KtZB6awBdpUKD9jf1b0SHzUv\nKBds0pjBqAlkd25HN7rOrFleaJ1/ctaJxQZBKT5ZPt0m9STJEadao0xAH0ahmbWn\nOlFuhjuefXKnEgV4We0+UXgVCwOPjdAvBbI+e0ocS3MFEvzG6uBQE3xDk3SzynTn\njh8BCNAw1FtxNrQHusEwMFxIt4I7mKZ9YIqioymCzLq9gwQbooMDQaHWBfEbwrbw\nqHyGO0aoSCqI3Haadr8faqU9GY/rOPNk3sgrDQoo//fb4hVC1CLQJ13hef4Y53CI\nrU7m2Ys6xt0nUW7/vGT1M0NPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNV\nHRMBAf8EBTADAQH/MB0GA1UdDgQWBBR5tFnme7bl5AFzgAiIyBpY9umbbjANBgkq\nhkiG9w0BAQsFAAOCAgEAVR9YqbyyqFDQDLHYGmkgJykIrGF1XIpu+ILlaS/V9lZL\nubhzEFnTIZd+50xx+7LSYK05qAvqFyFWhfFQDlnrzuBZ6brJFe+GnY+EgPbk6ZGQ\n3BebYhtF8GaV0nxvwuo77x/Py9auJ/GpsMiu/X1+mvoiBOv/2X/qkSsisRcOj/KK\nNFtY2PwByVS5uCbMiogziUwthDyC3+6WVwW6LLv3xLfHTjuCvjHIInNzktHCgKQ5\nORAzI4JMPJ+GslWYHb4phowim57iaztXOoJwTdwJx4nLCgdNbOhdjsnvzqvHu7Ur\nTkXWStAmzOVyyghqpZXjFaH3pO3JLF+l+/+sKAIuvtd7u+Nxe5AW0wdeRlN8NwdC\njNPElpzVmbUq4JUagEiuTDkHzsxHpFKVK7q4+63SM1N95R1NbdWhscdCb+ZAJzVc\noyi3B43njTOQ5yOf+1CceWxG1bQVs5ZufpsMljq4Ui0/1lvh+wjChP4kqKOJ2qxq\n4RgqsahDYVvTH9w7jXbyLeiNdd8XM2w9U/t7y0Ff/9yi0GE44Za4rF2LN9d11TPA\nmRGunUHBcnWEvgJBQl9nJEiU0Zsnvgc/ubhPgXRR4Xq37Z0j4r7g1SgEEzwxA57d\nemyPxgcYxn/eR44/KJ4EBs+lVDR3veyJm+kXQ99b21/+jh5Xos1AnX5iItreGCc=\n-----END CERTIFICATE-----\n)EOF\";\n\n#define PIN 38\n#define NUMPIXELS 1\n\nAdafruit_NeoPixel pixels(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);\n\nint hue = 0;\n//char* name = \"\";\n\n\nvoid setup() {\n  Serial.begin(9600);\n  Serial.print(\"\\nConnecting to \");\n  Serial.println(ssid);\n\n  pixels.begin();\n\n  pinMode(0, INPUT);\n  pinMode(48, OUTPUT);\n\n  WiFi.mode(WIFI_STA);\n  WiFi.begin(ssid, password);\n\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\\nWiFi connected\\nIP address: \");\n  Serial.println(WiFi.localIP());\n\n  while (!Serial) delay(1);\n\n  espClient.setCACert(root_ca);\n  client.setServer(mqtt_server, mqtt_port);\n  client.setCallback(callback);\n}\n\nvoid loop() {\n\n  if (!client.connected()){\n    reconnect();\n  } \n  client.loop();\n\n  if (Serial.available() &gt; 0) {\n    hue = Serial.parseInt();\n    String name = (Serial.readStringUntil('\\n'));\n    name = \"mdef/\"+name;\n    //name = nameS.c_str();\n    Serial.println(hue);\n    Serial.println(name);\n    publishMessage(name.c_str(), String(hue), true);\n  }\n}\n\n//=======================================================================Function=================================================================================\n\nvoid reconnect() {\n  // Loop until we\u2019re reconnected\n  while (!client.connected()) {\n    Serial.print(\"Attempting MQTT connection\u2026\");\n    String clientId = \"ESP32Client -\";  // Create a random client ID\n    clientId += String(random(0xffff), HEX);\n    // Attempt to connect\n    if (client.connect(clientId.c_str(), mqtt_username, mqtt_password)) {\n      Serial.println(\"connected\");\n\n      client.subscribe(class_topic);  // subscribe the topics here\n      client.subscribe(name_topic);   // subscribe the topics here\n    } else {\n      Serial.print(\"failed, rc=\");\n      Serial.print(client.state());\n      Serial.println(\" try again in 5 seconds\");  // Wait 5 seconds before retrying\n      delay(5000);\n    }\n  }\n}\n\n//=======================================\n// This void is called every time we have a message from the broker\n\nvoid callback(char* topic, byte* payload, unsigned int length) {\n  String incommingMessage = \"\";\n  for (int i = 0; i &lt; length; i++){\n    incommingMessage += (char)payload[i];\n  } \n  Serial.println(\"Message arrived[\" + String(topic) + \"]\" + incommingMessage);\n  int hue = incommingMessage.toInt();\n  pixels.setPixelColor(0, pixels.ColorHSV(hue, 255, 255));\n  pixels.show();  // Send the updated pixel colors to the hardware.\n}\n\n//======================================= publising as string\nvoid publishMessage(const char* topic, String payload, boolean retained) {\n  if (client.publish(topic, payload.c_str(), true))\n    Serial.println(\"Message publised [\" + String(topic) + \"]: \" + payload);\n}\n</code></pre>"},{"location":"mqtt/#all-together-now","title":"All together now!","text":"<p>Now let's do a class collabaration and let's create some art! </p> <p>We will use p5js, a javascript livrary to create visuals, and MQTT over websockets for our installation. </p> <p>Here you have the code: </p> <pre><code>#include &lt;WiFi.h&gt;\n#include &lt;PubSubClient.h&gt;\n\nconst char* ssid = \"Iaac-Wifi\";\nconst char* password = \"EnterIaac22@\";\nWiFiClient wifiClient;\n\nconst char* mqttBroker = \"mqtt-staging.smartcitizen.me\";\nconst char* mqttClientName = \"josep\";\nconst char* mqttUser = \"fablabbcn102\"; // MQTT User Authentification\nconst char* mqttPass = \"\"; // MQTT Password Authentification\nconst char* draw_topic = \"lab/mdef/draw\";\nconst char* class_topic = \"lab/mdef/class\";\nconst char* name_topic = \"lab/mdef/adai\";\nPubSubClient mqttClient(wifiClient);\n\nunsigned long values[] = {0,0,0,0};\nString direction[] = {\"U\",\"R\",\"D\",\"L\"};\n\nString dir = \"\";\n\nunsigned long threshold = 40000;\n\nvoid mqttConnect() {\n\n  while (!mqttClient.connected()) {\n\n    Serial.print(\"Attempting MQTT connection...\");\n\n    if (mqttClient.connect(mqttClientName, mqttUser, mqttPass)) {\n\n      Serial.println(\"connected\");\n      mqttClient.publish(\"hello\", mqttClientName);\n\n      // Topic(s) subscription\n      mqttClient.subscribe(class_topic);\n      mqttClient.subscribe(name_topic);\n\n    } else {\n\n      Serial.print(\"failed, rc=\");\n      Serial.print(mqttClient.state());\n      Serial.println(\" try again in 5 seconds\");\n      delay(5000);\n\n    }\n  }\n}\n\nvoid callback(char* topic, byte* payload, unsigned int length) {\n  String incommingMessage = \"\";\n  for (int i = 0; i &lt; length; i++){\n    incommingMessage += (char)payload[i];\n  } \n  Serial.println(\"Message arrived[\" + String(topic) + \"]\" + incommingMessage);\n}\n\nvoid setup() {\n\n  Serial.begin(115200);\n  Serial.println(\"Hello\");\n\n  // Connect to wifi\n  WiFi.mode(WIFI_STA);\n  WiFi.begin(ssid, password);\n\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n\n  Serial.print(\"Connected to \");\n  Serial.println(ssid);\n  Serial.print(\"IP address: \");\n  Serial.println(WiFi.localIP());\n\n  // MQTT setup\n  mqttClient.setServer(mqttBroker, 1883);\n  mqttClient.setCallback(callback);\n}\n\nunsigned long lastMsg = 0;\nchar msg[50];\n\nvoid loop() {\n  // Check if we are still connected to the MQTT broker\n  if (!mqttClient.connected()) {\n    mqttConnect();\n  }\n\n  // Let PubSubClient library do his magic\n  mqttClient.loop();\n\n  // Add your publish code here --------------------\n  unsigned long max = 0;\n  int max_i;\n  for (int i=0; i&lt;4; i++){\n    values[i] = touchRead(i+4);\n    //Serial.print(values[i]);\n    //Serial.print(\",\");\n    if (values[i] &gt; max){\n      max = values[i];\n      max_i = i;\n    }\n  }\n  //Serial.println(\"\");\n  if (max &gt; threshold &amp;&amp; dir != direction[max_i]){\n    dir = direction[max_i];\n    Serial.println(dir);\n    mqttClient.publish(draw_topic, dir.c_str());\n  }\n  else if (max &lt;= threshold){\n    dir=\"\";\n  }\n}\n</code></pre>"},{"location":"GettingStarted/arduinoIDE/","title":"How to set up the Arduino IDE","text":"<p>The first thing to do to progam the Barduino 4 is to set up the Arduino IDE. Follow this steps to do so: </p> <ol> <li>Install Arduino IDE<ul> <li>You can go to the Arduino official page an download the last version of the Arduino IDE.</li> </ul> </li> <li> <p>Add the Additional Boards URL</p> <ul> <li>Open the preferences menu File/Preferences</li> <li>In the Additional Boards URL's dialog add the next line:</li> </ul> <pre><code>https://espressif.github.io/arduino-esp32/package_esp32_dev_index.json\n</code></pre> <p></p> </li> <li> <p>Install the Boards Manager</p> <ul> <li>Click on the second Icon in the left bar menu or in Tools/Board/Board Manager and search esp32</li> <li>Install the boards esp32 by Espressif Systems</li> </ul> <p></p> </li> <li> <p>Select your board</p> <ul> <li>Connect your board and it may appear in the top dropdown as ESP32S3 Dev Module, select it.</li> <li>If it doesn't appear with that name, click on it and change the board to ESP32S3 Dev Module and select the port where your board is connected. </li> </ul> <p>Bug</p> <p>The first time you connect your board it may connect and disconnect, once you program it, it will show as connected. </p> </li> <li> <p>Set the correct board parameters: </p> <ul> <li>To make it simple, change the USB CDC on Boot to Enable under Tools to make sure that the Serial will print over USB. </li> <li>To start with it, you can keep the rest of parameters as they show in the picture.</li> </ul> <p></p> </li> <li> <p>Program your board!</p> <ul> <li>Everything should be ready to upload a code to your new Barduino!</li> </ul> </li> </ol>"},{"location":"GettingStarted/pinout/","title":"Pinout","text":""},{"location":"GettingStarted/pinout/#inputs","title":"Inputs","text":"<p>There are some available inputs on the board that uses different pins. </p> <ul> <li>Tactile push button: Connected to GPIO00.</li> </ul> <p>Warning</p> <p>GPIO00 is used to start Boot mode if it's pressed while powering/reseting the board, when the board is already on, you can program it to read it as an input. </p> <ul> <li>Capacitive pins: Pins TOUCH01, TOUCH02, TOUCH04, TOUCH05 and TOUCH06 are available with a capacitive pad on the board. </li> </ul> <p>Bug</p> <p>Pin TOUCH03 is also exposed, but it cannot be used as it is used by the Phototransitor circuit. </p> <ul> <li> <p>Phototransistor: Connected to GPIO03.</p> </li> <li> <p>Temperature Sensor: TMP102 connected by I^2^C by GPIO08 and GPIO09.  </p> </li> </ul>"},{"location":"GettingStarted/pinout/#outputs","title":"Outputs","text":"<p>There are some available outputs on the board that uses different pins. </p> <ul> <li>LED: Connected to GPIO48.</li> <li>Buzzer: Connected to GPIO14.</li> <li>Neopixel: Connected to GPIO38.</li> </ul> <p>Note</p> <p>The Data Out pin of the Neopixel is connected to the DO pin, to continue the Neopixel strip from there. </p>"}]}